<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="terminal" baseProfile="full" viewBox="0 0 687 948" width="687" version="1.1">
    <defs>
        <termtosvg:template_settings xmlns:termtosvg="https://github.com/nbedos/termtosvg">
            <termtosvg:screen_geometry columns="80" rows="51"/>
            <termtosvg:animation type="css"/>
        </termtosvg:template_settings>
        <style type="text/css" id="generated-style"><![CDATA[#screen {
                font-family: 'DejaVu Sans Mono', monospace;
                font-style: normal;
                font-size: 14px;
            }

        text {
            dominant-baseline: text-before-edge;
            white-space: pre;
        }
    ]]></style>
        <style type="text/css" id="user-style">
            /* The colors defined below are the default 16 colors used for rendering text of the terminal. Adjust
               them as needed.
               PowerShell colors based on https://en.wikipedia.org/wiki/ANSI_escape_code#Colors */
            .foreground {fill: #cccccc;}
            .background {fill: #0c0c0c;}
            .color0 {fill: #0c0c0c;}
            .color1 {fill: #c50f1f;}
            .color2 {fill: #13a10e;}
            .color3 {fill: #c19c00;}
            .color4 {fill: #0037da;}
            .color5 {fill: #881798;}
            .color6 {fill: #3a96dd;}
            .color7 {fill: #cccccc;}
            .color8 {fill: #767676;}
            .color9 {fill: #e74856;}
            .color10 {fill: #16c60c;}
            .color11 {fill: #f9f1a5;}
            .color12 {fill: #3b78ff;}
            .color13 {fill: #b4009e;}
            .color14 {fill: #61d6d6;}
            .color15 {fill: #f2f2f2;}
        </style>
    </defs>
    <rect id="terminalui" class="background" width="100%" height="100%" ry="4.5826941"/>
    <circle cx="24" cy="23" r="7" class="color1"/>
    <circle cx="44" cy="23" r="7" class="color3"/>
    <circle cx="64" cy="23" r="7" class="color2"/>
    <svg id="screen" width="640" height="867" x="23" y="50" viewBox="0 0 640 867" preserveAspectRatio="xMidYMin slice"><rect class="background" height="100%" width="100%" x="0" y="0"/><defs><g id="g1"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="408" class="color2">the trampoline runs continuations, uh, continuously</text></g><g id="g2"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="168" class="color2">noop magic smoke test</text></g><g id="g3"><text x="0" textLength="24" font-weight="bold" font-style="italic" class="color8">## </text><text x="24" textLength="72" font-weight="bold" font-style="italic" class="color15">2 tests  </text><text x="96" textLength="152" class="foreground">      &#128994;2          </text></g><g id="g4"><text x="0" textLength="96" class="foreground">   var r = 0</text></g><g id="g5"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="312" class="color2">local variables migrating in/out of env</text></g><g id="g6"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="320" class="color2">out-of-scope variables operate correctly</text></g><g id="g7"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="288" class="color2">declaration via tuple deconstruction</text></g><g id="g8"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="168" class="color2">multi-var declaration</text></g><g id="g9"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="264" class="color2">shadowing and proc param defaults</text></g><g id="g10"><text x="0" textLength="24" class="foreground">&#10068; </text><text x="24" textLength="248" text-decoration=" line-through" class="color5">reassignment of var proc params</text><text x="272" textLength="16" class="foreground">: </text><text x="288" textLength="136" font-weight="bold" font-style="italic" class="color15">pending issue #47</text></g><g id="g11"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="200" class="color2">block with break under if</text></g><g id="g12"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="160" class="color2">cps block with break</text></g><g id="g13"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="248" class="color2">break statements without cps &#129396;</text></g><g id="g14"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="184" class="color2">a fairly tame cps break</text></g><g id="g15"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="272" class="color2">break in a nested else (don't ask)</text></g><g id="g16"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="96" class="color2">named breaks</text></g><g id="g17"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="256" class="color2">named breaks from inside a while</text></g><g id="g18"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="168" class="color2">while loops correctly</text></g><g id="g19"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="288" class="color2">while statement with cps call inside</text></g><g id="g20"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="104" class="color2">shadow test A</text></g><g id="g21"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="104" class="color2">shadow test B</text></g><g id="g22"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="104" class="color2">shadow test C</text></g><g id="g23"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="104" class="color2">shadow test D</text></g><g id="g24"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="104" class="color2">shadow test E</text></g><g id="g25"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="104" class="color2">shadow test F</text></g><g id="g26"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="120" class="color2">case statements</text></g><g id="g27"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="248" class="color2">continue statement within while</text></g><g id="g28"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="232" class="color2">for loop with continue, break</text></g><g id="g29"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="200" class="color2">shadow mission impossible</text></g><g id="g30"><text x="0" textLength="24" class="foreground">&#10068; </text><text x="24" textLength="232" text-decoration=" line-through" class="color5">assignment shim with constant</text><text x="256" textLength="16" class="foreground">: </text><text x="272" textLength="176" font-weight="bold" font-style="italic" class="color15">pending discussion #28</text></g><g id="g31"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="296" class="color2">while statement with local var inside</text></g><g id="g32"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="344" class="color2">running a function pointer inside an object</text></g><g id="g33"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="320" class="color2">call a macro that calls a foreign symbol</text></g><g id="g34"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="272" class="color2">call a template with explicit bind</text></g><g id="g35"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="272" class="color2">template call in nested call nodes</text></g><g id="g36"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="416" class="color2">calling a function pointer produced by an expression</text></g><g id="g37"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="160" class="color2">simple if-else split</text></g><g id="g38"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="216" class="color2">simple case statement split</text></g><g id="g39"><text x="0" textLength="24" class="foreground">&#10068; </text><text x="24" textLength="216" text-decoration=" line-through" class="color5">try-except-statement splits</text><text x="240" textLength="16" class="foreground">: </text><text x="256" textLength="160" font-weight="bold" font-style="italic" class="color15">not working, see #78</text></g><g id="g40"><text x="0" textLength="24" class="foreground">&#10068; </text><text x="24" textLength="224" text-decoration=" line-through" class="color5">try-except splits with raise</text><text x="248" textLength="16" class="foreground">: </text><text x="264" textLength="160" font-weight="bold" font-style="italic" class="color15">not working, see #78</text></g><g id="g41"><text x="0" textLength="24" class="foreground">&#10068; </text><text x="24" textLength="224" text-decoration=" line-through" class="color5">try-finally-statement splits</text><text x="248" textLength="16" class="foreground">: </text><text x="264" textLength="160" font-weight="bold" font-style="italic" class="color15">not working, see #78</text></g><g id="g42"><text x="0" textLength="24" class="foreground">&#10068; </text><text x="24" textLength="288" text-decoration=" line-through" class="color5">try-except-finally splits with raise</text><text x="312" textLength="16" class="foreground">: </text><text x="328" textLength="160" font-weight="bold" font-style="italic" class="color15">not working, see #78</text></g><g id="g43"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="240" class="color2">block control flow after split</text></g><g id="g44"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="216" class="color2">if control flow after split</text></g><g id="g45"><text x="0" textLength="24" class="foreground">&#10068; </text><text x="24" textLength="128" text-decoration=" line-through" class="color5">defer with split</text><text x="152" textLength="16" class="foreground">: </text><text x="168" textLength="160" font-weight="bold" font-style="italic" class="color15">not working, see #80</text></g><g id="g46"><text x="0" textLength="24" class="foreground">&#10068; </text><text x="24" textLength="136" text-decoration=" line-through" class="color5">implicit generics</text><text x="160" textLength="16" class="foreground">: </text><text x="176" textLength="160" font-weight="bold" font-style="italic" class="color15">not working, ref #51</text></g><g id="g47"><text x="0" textLength="24" class="foreground">&#10068; </text><text x="24" textLength="136" text-decoration=" line-through" class="color5">explicit generics</text><text x="160" textLength="16" class="foreground">: </text><text x="176" textLength="160" font-weight="bold" font-style="italic" class="color15">not working, ref #51</text></g><g id="g48"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="488" class="color2">nested block breaks with one containing split and one doesn't</text></g><g id="g49"><text x="0" textLength="24" font-weight="bold" font-style="italic" class="color8">## </text><text x="24" textLength="80" font-weight="bold" font-style="italic" class="color15">46 tests  </text><text x="104" textLength="184" class="foreground">      &#128994;37  &#10068;9        </text></g><g id="g50"><text x="0" textLength="8" class="background"> </text></g></defs><g><use xlink:href="#g1" y="0"/><use xlink:href="#g2" y="17"/><use xlink:href="#g3" y="34"/><use xlink:href="#g4" y="51"/><use xlink:href="#g5" y="68"/><use xlink:href="#g6" y="85"/><use xlink:href="#g7" y="102"/><use xlink:href="#g8" y="119"/><use xlink:href="#g9" y="136"/><use xlink:href="#g10" y="153"/><use xlink:href="#g11" y="170"/><use xlink:href="#g12" y="187"/><use xlink:href="#g13" y="204"/><use xlink:href="#g14" y="221"/><use xlink:href="#g15" y="238"/><use xlink:href="#g16" y="255"/><use xlink:href="#g17" y="272"/><use xlink:href="#g18" y="289"/><use xlink:href="#g19" y="306"/><use xlink:href="#g20" y="323"/><use xlink:href="#g21" y="340"/><use xlink:href="#g22" y="357"/><use xlink:href="#g23" y="374"/><use xlink:href="#g24" y="391"/><use xlink:href="#g25" y="408"/><use xlink:href="#g26" y="425"/><use xlink:href="#g27" y="442"/><use xlink:href="#g28" y="459"/><use xlink:href="#g29" y="476"/><use xlink:href="#g30" y="493"/><use xlink:href="#g31" y="510"/><use xlink:href="#g32" y="527"/><use xlink:href="#g33" y="544"/><use xlink:href="#g34" y="561"/><use xlink:href="#g35" y="578"/><use xlink:href="#g36" y="595"/><use xlink:href="#g37" y="612"/><use xlink:href="#g38" y="629"/><use xlink:href="#g39" y="646"/><use xlink:href="#g40" y="663"/><use xlink:href="#g41" y="680"/><use xlink:href="#g42" y="697"/><use xlink:href="#g43" y="714"/><use xlink:href="#g44" y="731"/><use xlink:href="#g45" y="748"/><use xlink:href="#g46" y="765"/><use xlink:href="#g47" y="782"/><use xlink:href="#g48" y="799"/><use xlink:href="#g49" y="816"/><rect x="0" y="833" width="8" height="17" class="foreground"/><use xlink:href="#g50" y="833"/></g></svg>
</svg>