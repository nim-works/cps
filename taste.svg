<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="terminal" baseProfile="full" viewBox="0 0 687 1169" width="687" version="1.1">
    <defs>
        <termtosvg:template_settings xmlns:termtosvg="https://github.com/nbedos/termtosvg">
            <termtosvg:screen_geometry columns="80" rows="64"/>
            <termtosvg:animation type="css"/>
        </termtosvg:template_settings>
        <style type="text/css" id="generated-style"><![CDATA[#screen {
                font-family: 'DejaVu Sans Mono', monospace;
                font-style: normal;
                font-size: 14px;
            }

        text {
            dominant-baseline: text-before-edge;
            white-space: pre;
        }
    ]]></style>
        <style type="text/css" id="user-style">
            /* The colors defined below are the default 16 colors used for rendering text of the terminal. Adjust
               them as needed.
               PowerShell colors based on https://en.wikipedia.org/wiki/ANSI_escape_code#Colors */
            .foreground {fill: #cccccc;}
            .background {fill: #0c0c0c;}
            .color0 {fill: #0c0c0c;}
            .color1 {fill: #c50f1f;}
            .color2 {fill: #13a10e;}
            .color3 {fill: #c19c00;}
            .color4 {fill: #0037da;}
            .color5 {fill: #881798;}
            .color6 {fill: #3a96dd;}
            .color7 {fill: #cccccc;}
            .color8 {fill: #767676;}
            .color9 {fill: #e74856;}
            .color10 {fill: #16c60c;}
            .color11 {fill: #f9f1a5;}
            .color12 {fill: #3b78ff;}
            .color13 {fill: #b4009e;}
            .color14 {fill: #61d6d6;}
            .color15 {fill: #f2f2f2;}
        </style>
    </defs>
    <rect id="terminalui" class="background" width="100%" height="100%" ry="4.5826941"/>
    <circle cx="24" cy="23" r="7" class="color1"/>
    <circle cx="44" cy="23" r="7" class="color3"/>
    <circle cx="64" cy="23" r="7" class="color2"/>
    <svg id="screen" width="640" height="1088" x="23" y="50" viewBox="0 0 640 1088" preserveAspectRatio="xMidYMin slice"><rect class="background" height="100%" width="100%" x="0" y="0"/><defs><g id="g1"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="408" class="color2">the trampoline runs continuations, uh, continuously</text></g><g id="g2"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="424" class="color2">the noop magic smoke test demonstrates shedding scope</text></g><g id="g3"><text x="0" textLength="24" font-weight="bold" font-style="italic" class="color8">## </text><text x="24" textLength="72" font-weight="bold" font-style="italic" class="color15">2 tests  </text><text x="96" textLength="152" class="foreground">      &#128994;2          </text></g><g id="g4"><text x="0" textLength="96" class="foreground">   var r = 0</text></g><g id="g5"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="360" class="color2">local variables migrate into the continuation</text></g><g id="g6"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="336" class="color2">out-of-scope variables operate as expected</text></g><g id="g7"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="360" class="color2">tuple deconstruction with a call source works</text></g><g id="g8"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="368" class="color2">tuple deconstruction with distinct types works</text></g><g id="g9"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="336" class="color2">declaration via tuple deconstruction works</text></g><g id="g10"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="424" class="color2">multi-variable declaration with shared initialization</text></g><g id="g11"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="376" class="color2">shadowing and proc param defaults are supported</text></g><g id="g12"><text x="0" textLength="24" class="foreground">&#10068; </text><text x="24" textLength="312" text-decoration=" line-through" class="color5">reassignment of mutable var proc params</text><text x="336" textLength="16" class="foreground">: </text><text x="352" textLength="136" font-weight="bold" font-style="italic" class="color15">pending issue #47</text></g><g id="g13"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="336" class="color2">a block statement with a break under an if</text></g><g id="g14"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="376" class="color2">a block with a continuation followed by a break</text></g><g id="g15"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="392" class="color2">a while statement with a continuation and a break</text></g><g id="g16"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="416" class="color2">a break inside a multiply-nested else inside a while</text></g><g id="g17"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="368" class="color2">named breaks are supported, with nested breaks</text></g><g id="g18"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="376" class="color2">named breaks work from inside a while statement</text></g><g id="g19"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="248" class="color2">while loops correctly, uh, loop</text></g><g id="g20"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="328" class="color2">proc parameters pass across continuations</text></g><g id="g21"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="336" class="color2">local variables may shadow proc parameters</text></g><g id="g22"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="360" class="color2">shadowing variables may impart new mutability</text></g><g id="g23"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="360" class="color2">shadowing variables pass across continuations</text></g><g id="g24"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="312" class="color2">scope-based shadowing is also supported</text></g><g id="g25"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="368" class="color2">shadowing is unperturbed by continuation calls</text></g><g id="g26"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="320" class="color2">case statements can support control-flow</text></g><g id="g27"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="408" class="color2">a continue statement within a while statement works</text></g><g id="g28"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="344" class="color2">a gratuitously complex shadowing test works</text></g><g id="g29"><text x="0" textLength="24" class="foreground">&#10068; </text><text x="24" textLength="376" text-decoration=" line-through" class="color5">local assignment to a continuation return value</text><text x="400" textLength="16" class="foreground">: </text><text x="416" textLength="176" font-weight="bold" font-style="italic" class="color15">pending discussion #28</text></g><g id="g30"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="400" class="color2">a while statement supports a local variable inside</text></g><g id="g31"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="392" class="color2">calling a function pointer inside an object works</text></g><g id="g32"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="392" class="color2">calling a macro that calls a foreign symbol works</text></g><g id="g33"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="376" class="color2">calling a template with explicit symbol binding</text></g><g id="g34"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="384" class="color2">template calls inside nested call nodes are fine</text></g><g id="g35"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="416" class="color2">calling a function pointer produced by an expression</text></g><g id="g36"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="392" class="color2">a simple if-else split across continuations works</text></g><g id="g37"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="448" class="color2">a simple case statement split across continuations works</text></g><g id="g38"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="440" class="color2">try-except statements may be split across continuations</text></g><g id="g39"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="456" class="color2">try-except statements may split and also raise exceptions</text></g><g id="g40"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="384" class="color2">exception clauses may split across continuations</text></g><g id="g41"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="400" class="color2">exceptions raised in the current continuation work</text></g><g id="g42"><text x="0" textLength="24" class="foreground">&#10068; </text><text x="24" textLength="288" text-decoration=" line-through" class="color5">try statements with a finally clause</text><text x="312" textLength="16" class="foreground">: </text><text x="328" textLength="160" font-weight="bold" font-style="italic" class="color15">not working, see #78</text></g><g id="g43"><text x="0" textLength="24" class="foreground">&#10068; </text><text x="24" textLength="368" text-decoration=" line-through" class="color5">try statements with an exception and a finally</text><text x="392" textLength="16" class="foreground">: </text><text x="408" textLength="160" font-weight="bold" font-style="italic" class="color15">not working, see #78</text></g><g id="g44"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="360" class="color2">block control-flow across continuations works</text></g><g id="g45"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="336" class="color2">if control-flow across continuations works</text></g><g id="g46"><text x="0" textLength="24" class="foreground">&#10068; </text><text x="24" textLength="360" text-decoration=" line-through" class="color5">a defer statement works across a continuation</text><text x="384" textLength="16" class="foreground">: </text><text x="400" textLength="160" font-weight="bold" font-style="italic" class="color15">not working, see #80</text></g><g id="g47"><text x="0" textLength="24" class="foreground">&#10068; </text><text x="24" textLength="336" text-decoration=" line-through" class="color5">implicit generics in continuation creation</text><text x="360" textLength="16" class="foreground">: </text><text x="376" textLength="160" font-weight="bold" font-style="italic" class="color15">not working, ref #51</text></g><g id="g48"><text x="0" textLength="24" class="foreground">&#10068; </text><text x="24" textLength="336" text-decoration=" line-through" class="color5">explicit generics in continuation creation</text><text x="360" textLength="16" class="foreground">: </text><text x="376" textLength="160" font-weight="bold" font-style="italic" class="color15">not working, ref #51</text></g><g id="g49"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="336" class="color2">nested blocks with an interior break works</text></g><g id="g50"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="288" class="color2">a basic defer statement is supported</text></g><g id="g51"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="328" class="color2">a defer in a nested template is supported</text></g><g id="g52"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="304" class="color2">a defer inside a block statement works</text></g><g id="g53"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="240" class="color2">a naked defer is not a problem</text></g><g id="g54"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="368" class="color2">various varargs usages are supported just fine</text></g><g id="g55"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="416" class="color2">for loops with a continue and a break work correctly</text></g><g id="g56"><text x="0" textLength="24" class="foreground">&#10068; </text><text x="24" textLength="448" text-decoration=" line-through" class="color5">for loops with a continue and break across continuations</text><text x="472" textLength="16" class="foreground">: </text><text x="488" textLength="88" font-weight="bold" font-style="italic" class="color15">pending #48</text></g><g id="g57"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="424" class="color2">a while loop with only a single continuing call works</text></g><g id="g58"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="368" class="color2">cooperative yield hooks are used automatically</text></g><g id="g59"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="392" class="color2">control-flow tracing hooks are used automatically</text></g><g id="g60"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="424" class="color2">custom continuation allocators are used automatically</text></g><g id="g61"><text x="0" textLength="24" class="foreground">&#128994; </text><text x="24" textLength="440" class="color2">custom continuation deallocators are used automatically</text></g><g id="g62"><text x="0" textLength="24" font-weight="bold" font-style="italic" class="color8">## </text><text x="24" textLength="80" font-weight="bold" font-style="italic" class="color15">59 tests  </text><text x="104" textLength="184" class="foreground">      &#128994;51  &#10068;8        </text></g><g id="g63"><text x="0" textLength="8" class="background"> </text></g></defs><g><use xlink:href="#g1" y="0"/><use xlink:href="#g2" y="17"/><use xlink:href="#g3" y="34"/><use xlink:href="#g4" y="51"/><use xlink:href="#g5" y="68"/><use xlink:href="#g6" y="85"/><use xlink:href="#g7" y="102"/><use xlink:href="#g8" y="119"/><use xlink:href="#g9" y="136"/><use xlink:href="#g10" y="153"/><use xlink:href="#g11" y="170"/><use xlink:href="#g12" y="187"/><use xlink:href="#g13" y="204"/><use xlink:href="#g14" y="221"/><use xlink:href="#g15" y="238"/><use xlink:href="#g16" y="255"/><use xlink:href="#g17" y="272"/><use xlink:href="#g18" y="289"/><use xlink:href="#g19" y="306"/><use xlink:href="#g20" y="323"/><use xlink:href="#g21" y="340"/><use xlink:href="#g22" y="357"/><use xlink:href="#g23" y="374"/><use xlink:href="#g24" y="391"/><use xlink:href="#g25" y="408"/><use xlink:href="#g26" y="425"/><use xlink:href="#g27" y="442"/><use xlink:href="#g28" y="459"/><use xlink:href="#g29" y="476"/><use xlink:href="#g30" y="493"/><use xlink:href="#g31" y="510"/><use xlink:href="#g32" y="527"/><use xlink:href="#g33" y="544"/><use xlink:href="#g34" y="561"/><use xlink:href="#g35" y="578"/><use xlink:href="#g36" y="595"/><use xlink:href="#g37" y="612"/><use xlink:href="#g38" y="629"/><use xlink:href="#g39" y="646"/><use xlink:href="#g40" y="663"/><use xlink:href="#g41" y="680"/><use xlink:href="#g42" y="697"/><use xlink:href="#g43" y="714"/><use xlink:href="#g44" y="731"/><use xlink:href="#g45" y="748"/><use xlink:href="#g46" y="765"/><use xlink:href="#g47" y="782"/><use xlink:href="#g48" y="799"/><use xlink:href="#g49" y="816"/><use xlink:href="#g50" y="833"/><use xlink:href="#g51" y="850"/><use xlink:href="#g52" y="867"/><use xlink:href="#g53" y="884"/><use xlink:href="#g54" y="901"/><use xlink:href="#g55" y="918"/><use xlink:href="#g56" y="935"/><use xlink:href="#g57" y="952"/><use xlink:href="#g58" y="969"/><use xlink:href="#g59" y="986"/><use xlink:href="#g60" y="1003"/><use xlink:href="#g61" y="1020"/><use xlink:href="#g62" y="1037"/><rect x="0" y="1054" width="8" height="17" class="foreground"/><use xlink:href="#g63" y="1054"/></g></svg>
</svg>